name: haproxy
summary: "fast and reliable load balancing reverse proxy"
description:
 HAProxy is a TCP/HTTP reverse proxy which is particularly suited for high
 availability environments. It features connection persistence through HTTP
 cookies, load balancing, header addition, modification, deletion both ways. It
 has request blocking capabilities and provides interface to display server
 status.
categories: ["cache-proxy"]
requires:
  reverseproxy:
    interface: http




options:
  global_log:
    default: "127.0.0.1 local0, 127.0.0.1 local1 notice"
    type: string
    description: Global log line ( multiples ... comma separated list )
  global_maxconn:
    default: 4096
    type: int
    description: |
        Sets the maximum per-process number of concurrent connections to
        <number>.
  global_user:
    default: "haproxy"
    type: string
    description: User
  global_group:
    default: "haproxy"
    type: string
    description: Group
  global_debug:
    default: False
    type: boolean
    description: Debug or not
  global_quiet:
    default: False
    type: boolean
    description: Quiet
  global_spread_checks:
    default: 0
    type: int
    description: |
        Sometimes it is desirable to avoid sending health checks to servers at
        exact intervals, for instance when many logical servers are located on
        the same physical server. With the help of this parameter, it becomes
        possible to add some randomness in the check interval between 0 and
        +/- 50%. A value between 2 and 5 seems to show good results.
  global_stats_socket:
    default: False
    type: boolean
    description: |
        Whether to enable the stats UNIX socket.
  default_log:
    default: "global"
    type: string
    description: Default log
  default_mode:
    default: "http"
    type: string
    description: Default mode
  default_options:
    default: "httplog, dontlognull"
    type: string
    description: Default options
  default_retries:
    default: 3
    type: int
    description: |
        Set the number of retries to perform on a server after a connection
        failure. It is important to understand that this value applies to the
        number of connection attempts, not full requests. When a connection
        has effectively been established to a server, there will be no more
        retry.
        In order to avoid immediate reconnections to a server which is
        restarting, a turn-around timer of 1 second is applied before a retry
        occurs.
  default_timeouts:
    default: "queue 20000, client 50000, connect 5000, server 50000"
    type: string
    description: Default timeouts
  enable_monitoring:
    default: False
    type: boolean
    description: Enable monitoring
  monitoring_port:
    default: 10000
    type: int
    description: Default monitoring port
  monitoring_allowed_cidr:
    default: "127.0.0.1/32"
    type: string
    description: |
        CIDR allowed ( multiple CIDRs separated by space ) access to the
        monitoring interface.
  monitoring_username:
    default: "haproxy"
    type: string
    description: Monitoring username
  monitoring_password:
    default: "changeme"
    type: string
    description: |
        Password to the monitoring interface ( if "changeme", a new password
        will be generated and displayed in juju-log )
  monitoring_stats_refresh:
    default: 3
    type: int
    description: Monitoring interface refresh interval (in seconds)
  package_status:
    default: "install"
    type: "string"
    description: |
        The status of service-affecting packages will be set to this value in the dpkg database.
        Useful valid values are "install" and "hold".
  services:
    default: |
              - service_name: haproxy_service
                service_host: "0.0.0.0"
                service_port: 80
                service_options: [balance leastconn, cookie SRVNAME insert]
                server_options: maxconn 100 cookie S{i} check
    type: string
    description: |
        Services definition(s). Although the variable type is a string, this is
        interpreted in the charm as yaml. To use multiple services within the
        same haproxy instance, specify all of the variables (service_name,
        service_host, service_port, service_options, server_options) with a "-"
        before the first variable, service_name, as above. Service options is a
        comma separated list, server options will be appended as a string to
        the individual server lines for a given listen stanza.

        If your web application serves dynamic content based on users' login
        sessions, a visitor will experience unexpected behaviour if each request
        is proxied to a different backend web server. Session stickiness ensures
        that a visitor 'sticks' to the backend web server which served their
        first request. This is made possible by tagging each backend server
        with a cookie. Session are sticky by default. To turn off sticky sessions,
        remove the 'cookie SRVNAME insert' and 'cookie S{i}' stanzas from
        `service_options` and `server_options`.
  sysctl:
    default: ""
    type: string
    description: >
      YAML-formatted list of sysctl values, e.g.:
      '{ net.ipv4.tcp_max_syn_backlog : 65536 }'
  nagios_context:
    default: "juju"
    type: string
    description: |
        Used by the nrpe-external-master subordinate charm.
        A string that will be prepended to instance name to set the host name
        in nagios. So for instance the hostname would be something like:
            juju-postgresql-0
        If you're running multiple environments with the same services in them
        this allows you to differentiate between them.
  metrics_target:
    default: ""
    type: string
    description: |
        Destination for statsd-format metrics, format "host:port". If
        not present and valid, metrics disabled. Requires "enable_monitoring"
        to be set to true to work.
  metrics_prefix:
    default: "dev.$UNIT.haproxy"
    type: string
    description: |
        Prefix for metrics. Special value $UNIT can be used to include the
        name of the unit in the prefix.
  metrics_sample_interval:
    default: 5
    type: int
    description: Period for metrics cron job to run in minutes
  source:
    default: ""
    type: string
    description: |
        Optional configuration to support use of additional sources such as:
        .
        - ppa:myteam/ppa
        - cloud:precise-proposed/folsom
        - http://my.archive.com/ubuntu main
        .
        The last option should be used in conjunction with the key configuration
        option.
  key:
    default: ""
    type: string
    description: |
        Key ID to import to the apt keyring to support use with arbitary source
        configuration from outside of Launchpad archives or PPA's.
